# Name of the workflow, which will appear in the "Actions" tab of your GitHub repository.
name: Java CI with Gradle

# This section defines the trigger for the workflow.
# In this case, it runs on every 'push' to the "main" branch and on every pull request targeting the "main" branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This section defines the jobs to be executed as part of the workflow.
jobs:
  # The first job: responsible for building the application.
  build:
    # Specifies the type of virtual machine (runner) to execute the job on.
    runs-on: ubuntu-latest
    
    # A job is composed of a sequence of steps.
    steps:
      # Step 1: Checks out your source code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up the Java environment with JDK version 17.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Executes the Gradle build command.
      - name: Build with Gradle
        run: ./gradlew build

      # Step 4: Saves the compiled .jar file as an "artifact".
      # This allows it to be used by other jobs later in the workflow (e.g., for deployment).
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: risk-processor-jar
          path: build/libs/*.jar

  # The second job: responsible for running the tests.
  test:
    # This job depends on the 'build' job. It will only start after the 'build' job has completed successfully.
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Our integration tests require a running Docker daemon to use Testcontainers.
      # This step starts the necessary infrastructure services defined in our docker-compose file.
      - name: Start containers for testing
        run: docker-compose up -d postgres elasticsearch

      # Executes the Gradle test command.
      - name: Run tests with Gradle
        run: ./gradlew test

      # Uploads the test reports as an artifact.
      # 'if: always()' ensures this step runs even if the previous steps fail,
      # which is crucial for debugging failed tests.
      - name: Upload test reports
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/